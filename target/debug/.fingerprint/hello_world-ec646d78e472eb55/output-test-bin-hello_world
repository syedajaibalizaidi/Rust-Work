{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src\\main.rs","byte_start":1713,"byte_end":1745,"line_start":25,"line_end":25,"column_start":28,"column_end":60,"is_primary":true,"text":[{"text":"                let card = format!(\"{} of {}\", value, suit); //formed the card.format macro can be to join together strings in some intelligent fashion. now need to store somewhere. ","highlight_start":28,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::uninlined_format_args)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":1723,"byte_end":1723,"line_start":25,"line_end":25,"column_start":38,"column_end":38,"is_primary":true,"text":[{"text":"                let card = format!(\"{} of {}\", value, suit); //formed the card.format macro can be to join together strings in some intelligent fashion. now need to store somewhere. ","highlight_start":38,"highlight_end":38}],"label":null,"suggested_replacement":"value","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\main.rs","byte_start":1729,"byte_end":1729,"line_start":25,"line_end":25,"column_start":44,"column_end":44,"is_primary":true,"text":[{"text":"                let card = format!(\"{} of {}\", value, suit); //formed the card.format macro can be to join together strings in some intelligent fashion. now need to store somewhere. ","highlight_start":44,"highlight_end":44}],"label":null,"suggested_replacement":"suit","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\main.rs","byte_start":1731,"byte_end":1738,"line_start":25,"line_end":25,"column_start":46,"column_end":53,"is_primary":true,"text":[{"text":"                let card = format!(\"{} of {}\", value, suit); //formed the card.format macro can be to join together strings in some intelligent fashion. now need to store somewhere. ","highlight_start":46,"highlight_end":53}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\main.rs","byte_start":1738,"byte_end":1744,"line_start":25,"line_end":25,"column_start":53,"column_end":59,"is_primary":true,"text":[{"text":"                let card = format!(\"{} of {}\", value, suit); //formed the card.format macro can be to join together strings in some intelligent fashion. now need to store somewhere. ","highlight_start":53,"highlight_end":59}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:25:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   let card = format!(\"{} of {}\", value, suit); //formed the card.format macro can be to join together strings in some intelligent fas\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(clippy::uninlined_format_args)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                let card = format!(\"{} of {}\"\u001b[0m\u001b[0m\u001b[38;5;9m, value, suit\u001b[0m\u001b[0m); //formed the card.format macro can be to join together strings in some intelligent fashion. now need to store somewhere. \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                let card = format!(\"{\u001b[0m\u001b[0m\u001b[38;5;10mvalue\u001b[0m\u001b[0m} of {\u001b[0m\u001b[0m\u001b[38;5;10msuit\u001b[0m\u001b[0m}\"); //formed the card.format macro can be to join together strings in some intelligent fashion. now need to store somewhere. \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variables can be used directly in the `format!` string","code":{"code":"clippy::uninlined_format_args","explanation":null},"level":"warning","spans":[{"file_name":"src\\main.rs","byte_start":2420,"byte_end":2461,"line_start":45,"line_end":45,"column_start":5,"column_end":46,"is_primary":true,"text":[{"text":"    println!(\"Here's your deck: {:#?}\", deck); // ! with println is macro in rust. in rust strings are formed with double quotes. single quote form char. adding # in {:?} makes the formatting","highlight_start":5,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":2449,"byte_end":2449,"line_start":45,"line_end":45,"column_start":34,"column_end":34,"is_primary":true,"text":[{"text":"    println!(\"Here's your deck: {:#?}\", deck); // ! with println is macro in rust. in rust strings are formed with double quotes. single quote form char. adding # in {:?} makes the formatting","highlight_start":34,"highlight_end":34}],"label":null,"suggested_replacement":"deck","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\main.rs","byte_start":2454,"byte_end":2460,"line_start":45,"line_end":45,"column_start":39,"column_end":45,"is_primary":true,"text":[{"text":"    println!(\"Here's your deck: {:#?}\", deck); // ! with println is macro in rust. in rust strings are formed with double quotes. single quote form char. adding # in {:?} makes the formatting","highlight_start":39,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: variables can be used directly in the `format!` string\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:45:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    println!(\"Here's your deck: {:#?}\", deck); // ! with println is macro in rust. in rust strings are formed with double quotes. single \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: change this to\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    println!(\"Here's your deck: {:#?}\"\u001b[0m\u001b[0m\u001b[38;5;9m, deck\u001b[0m\u001b[0m); // ! with println is macro in rust. in rust strings are formed with double quotes. single quote form char. adding # in {:?} makes the formatting\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    println!(\"Here's your deck: {\u001b[0m\u001b[0m\u001b[38;5;10mdeck\u001b[0m\u001b[0m:#?}\"); // ! with println is macro in rust. in rust strings are formed with double quotes. single quote form char. adding # in {:?} makes the formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: 2 warnings emitted\u001b[0m\n\n"}
